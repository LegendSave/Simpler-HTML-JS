/**
* @param {number} dx - Starting X position.
* @param {number} dy - Starting Y position.
* @param {string} title - Title content of dropdown.
* @param {string[]|string} text - Content inside of dropdown.
* @param {string[]|string} type - Type of element inside of dropdown
* @param {'up, down, left, right'} direction - Direction dropdown opens.
* @param {'event'} [interaction] - Using on event listeners reciprocated. 
* @param {'HTML element ID'} [parentElement] - Element for child elements.
  */
 //Execution error, parentElement is not working
function dropdown(dx, dy, title, text, type, direction, parentElement, interaction){
  this.dx = dx;
  this.dy = dy;
  this.title = title;
  this.text = text;
  this.type = type;
  this.direction = direction;
  this.parentElement = parentElement;
  this.interaction = interaction;

  //Default value for dropdown. Returned Closed.
  let eventNav = false;
if (interaction){
  document.addEventListener('${interaction}', e => {
    if (e.returnValue){
      eventNav = true;
    }
    else {
      console.log("Reciprocated value is unable to be used.")
      eventNav = false;
    }
  });
}
var parentElementsrc;
if (parentElement){
 parentElementsrc = document.getElementById(parentElement);
}
else{
 parentElementsrc = document.querySelector('body');
}

  //Request for later
  let controlX = dx.toString();
  let controlY = dy.toString();
  let bodyElement = document.createElement(type);
  let titleElement = document.createElement("h1");
  titleElement.innerHTML = title;
  bodyElement.innerHTML = text;
  console.log(parentElementsrc);
  document.parentElementsrc.appendChild(titleElement);
  document.parentElementsrc.appendChild(bodyElement);
}
dropdown(200, 200, "Title", "Item", "p", "down", "container");